{"mappings":"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","sources":["src/index.js","src/js/open_modal.js","src/js/add_to_watched.js","src/js/add_to_queue.js"],"sourcesContent":["import './js/movie_search';\nimport './js/pagination';\nimport './js/open_modal';\nimport './js/add_to_queue';\nimport './js/add_to_watched';\n\n","import { renderModalMovie } from './cards_rendering';\n\nimport { modalTeam } from './modal_team';\n\nimport { API_KEY, GENRE_URL, API_URL } from './main_fetch.js';\n\nimport { displayModalLoader } from './loader_spinner';\n\nconst MOVIE_URL = `https://api.themoviedb.org/3/movie/`;\nconst refs = {\n  body: document.querySelector('body'),\n  backdropModal: document.querySelector('.backdrop'),\n  modal: document.querySelector('.modal-content'),\n};\n\nrefs.body.addEventListener('click', openModal);\nexport const oneMovieFetch = async movieId => {\n  const response = await fetch(`${MOVIE_URL}${movieId}?api_key=${API_KEY}`);\n  const movie = await response.json();\n  return movie;\n};\nfunction openModal(e) {\n  if (e.target.classList.contains('backdrop')) {\n    closeModal();\n  }\n  const id = e.target.getAttribute('data-movieId');\n  if (e.target?.closest('svg')?.classList.contains('modal-close')) {\n    closeModal();\n  } else {\n    document.addEventListener('keydown', checkModalKey);\n\n    if (e.target?.closest('div')?.classList.contains('movie-card')) {\n      refs.backdropModal.classList.remove('is-hidden');\n      // document.addEventListener('keydown', checkModalKey);\n      displayModalLoader();\n      oneMovieFetch(id).then(elem => {\n        setTimeout(() => {\n          renderModalMovie(elem);\n        }, 1000);\n      });\n    }\n    if (e.target?.closest('span')?.classList.contains('team-link')) {\n      refs.backdropModal.classList.remove('is-hidden');\n      // document.addEventListener('keydown', checkModalKey);\n      modalTeam();\n    }\n  }\n}\n\nfunction closeModal() {\n  refs.body.style.overflowY = 'scroll';\n  refs.backdropModal.classList.add('is-hidden');\n  document.removeEventListener('keydown', checkModalKey);\n\n  refs.modal.innerHTML = '';\n}\n\nfunction checkModalKey(e) {\n  console.log(e.code);\n  if (e.code === 'Escape') {\n    closeModal();\n  }\n}\n","import { storageKeyQueue } from './add_to_queue';\nimport { Notify } from 'notiflix';\n\nconst modal = document.querySelector('.modal');\nexport const storageKeyWatched = 'movies-watched';\n\nmodal.addEventListener('click', ev => {\n  const targetEl = ev.target;\n  if (\n    targetEl.nodeName == 'BUTTON' &&\n    targetEl.classList.contains('button--watched')\n  ) {\n    // get movie data from DOM\n    const movieId = modal.querySelector('div[data-movieid]').dataset.movieid;\n    const movieTitle = modal.querySelector(\n      '.film-details__main-title'\n    ).innerHTML;\n\n    let watchedList = JSON.parse(localStorage.getItem(storageKeyWatched));\n    if (watchedList == null) {\n      watchedList = [];\n    }\n\n    // making a list of ids that are already in localStorage\n    let watchedIds = [];\n    watchedList.forEach(watchedMovie => {\n      watchedIds.push(watchedMovie.id);\n    });\n\n    // checking if the film is already in localStorage or not\n    if (watchedIds.includes(movieId)) {\n      Notify.warning('You already added the movie to watched');\n    } else {\n      // check if movie is in queue list ...\n      let queuedList = JSON.parse(localStorage.getItem(storageKeyQueue));\n      if (queuedList) {\n        // ... if it even exists ...\n        if (queuedList.length > 0) {\n          // ... and if it's not an empty array\n          let queuedIds = [];\n          queuedList.forEach(queuedMovie => {\n            queuedIds.push(queuedMovie.id);\n          });\n          // Remove movie from queue list, if it's in there\n          if (queuedIds.includes(movieId)) {\n            queuedList.splice(queuedIds.indexOf(movieId), 1);\n            localStorage.setItem(storageKeyQueue, JSON.stringify(queuedList));\n          }\n        }\n      }\n\n      // finally add movie to watched list\n      const movieInfo = {\n        id: movieId,\n        title: movieTitle,\n      };\n      watchedList.push(movieInfo);\n      localStorage.setItem(storageKeyWatched, JSON.stringify(watchedList));\n    }\n  }\n});","import { storageKeyWatched } from './add_to_watched';\nimport { Notify } from 'notiflix';\n\nconst modal = document.querySelector('.modal');\nexport const storageKeyQueue = 'movies-queued';\n\nmodal.addEventListener('click', ev => {\n  const targetEl = ev.target;\n  if (\n    targetEl.nodeName == 'BUTTON' &&\n    targetEl.classList.contains('button--queue')\n  ) {\n    // get movie data from DOM\n    const movieId = modal.querySelector('div[data-movieid]').dataset.movieid;\n    const movieTitle = modal.querySelector(\n      '.film-details__main-title'\n    ).innerHTML;\n\n    let queuedList = JSON.parse(localStorage.getItem(storageKeyQueue));\n    if (queuedList == null) {\n      queuedList = [];\n    }\n\n    // making a list of ids that are already in localStorage\n    let queuedIds = [];\n    queuedList.forEach(queuedMovie => {\n      queuedIds.push(queuedMovie.id);\n    });\n\n    //checking if the film is already in localStorage or not\n    if (queuedIds.includes(movieId)) {\n      Notify.warning('You already added the movie to queued');\n    } else {\n      // check if movie is in watched list ...\n      let watchedList = JSON.parse(localStorage.getItem(storageKeyWatched));\n      if (watchedList) {\n        // ... if it even exists ...\n        if (watchedList.length > 0) {\n          // ... and if it's not an empty array\n          let watchedIds = [];\n          watchedList.forEach(watchedMovie => {\n            watchedIds.push(watchedMovie.id);\n          });\n          // Remove movie from watched list, if it's in there\n          if (watchedIds.includes(movieId)) {\n            watchedList.splice(watchedIds.indexOf(movieId), 1);\n            localStorage.setItem(\n              storageKeyWatched,\n              JSON.stringify(watchedList)\n            );\n          }\n        }\n      }\n\n      // finally add movie to queued list\n      const movieInfo = {\n        id: movieId,\n        title: movieTitle,\n      };\n      queuedList.push(movieInfo);\n      localStorage.setItem(storageKeyQueue, JSON.stringify(queuedList));\n    }\n  }\n});"],"names":["parcelRequire","$d96cH","$d9eabaf351c8e1e9$var$refs","body","document","querySelector","backdropModal","modal","addEventListener","e","target","classList","contains","$d9eabaf351c8e1e9$var$closeModal","id","getAttribute","closest","$d9eabaf351c8e1e9$var$checkModalKey","remove","$3zUgC","displayModalLoader","async","movieId","response","fetch","$fHzm8","API_KEY","json","$d9eabaf351c8e1e9$export$d26b433b93abe1a0","then","elem","setTimeout","renderModalMovie","$hpROT","modalTeam","style","overflowY","add","removeEventListener","innerHTML","console","log","code","$5107f577ce8caa04$var$modal","ev","targetEl","nodeName","dataset","movieid","movieTitle","watchedList","JSON","parse","localStorage","getItem","watchedIds","forEach","watchedMovie","push","includes","$7Y9D8","Notify","warning","queuedList","$f53ed1f8111341cc$export$88934817e6e237da","length","queuedIds","queuedMovie","splice","indexOf","setItem","stringify","movieInfo","title","$f53ed1f8111341cc$var$modal"],"version":3,"file":"index.66d29b77.js.map"}